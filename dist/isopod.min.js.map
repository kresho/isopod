{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///isopod.min.js","webpack:///webpack/bootstrap 59290157ec05a0ae9d34","webpack:///./src/isopod.js","webpack:///./~/farse/src/farse.js","webpack:///./src/utils.js","webpack:///./~/farse/src/unfarse.js","webpack:///./src/deserialize.js","webpack:///./src/serialize.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","isopod","serialize","deserialize","closeOf","prev","ch","openClose","parsingContext","stack","last","length","peach","str","iter","matchesLast","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","pop","close","push","err","parseParamStr","params","curParam","parseArrow","source","left","right","hitArrow","slice","trim","paramStr","startsWith","body","name","kind","parseNormal","trimLeft","bodyStr","farse","fn","Function","prototype","toString","(","[","{","\"","'","//","/*","inverse","global","each","obj","Object","keys","forEach","k","flags","r","ignoreCase","multiline","sticky","baseTypeOf","thing","isopodTypeOf","type","specialTypes","has","hostGlobals","allowedTypes","getSymbolString","sym","match","parensPattern","hasNonNativeConstructor","hasOwnProperty","nativeConstructors","constructor","isSimple","isRef","_typeof","isPlainOrTypedArray","typedArrayTypes","hostObjFromPath","path","reduce","key","e","typedArrayConstructors","Set","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","add","bufferableConstructors","DataView","bufferableTypes","Map","set","NaN","Infinity","Boolean","Number","Array","RegExp","Error","ArrayBuffer","Date","nativePrototypes","specialType","globallyAccessible","queue","item","shift","getOwnPropertyNames","concat","propertyName","child","_toConsumableArray","arr","isArray","i","arr2","from","isArrow","parsed","isGenerator","inexactUnfarse","GeneratorFunction","bind","apply","exactUnfarse","gap","label","eval","join","regeneratorRuntime","mark","_callee","wrap","_context","stop","inexact","exact","typedFromDehydrated","dehydrated","message","defineProperty","enumerable","buffer","utils","hydrateOne","hydrated","refs","possibleRef","v","elem","mapEntry","serialized","mapping","todoBufferables","map","index","emptyHydrated","get","byteOffset","bufferable","bufferableSource","currentProto","getPrototypeOf","originalProto","setPrototypeOf","assoc","original","idCache","sourceValueFrom","dehydrate","_ret","_ret2","valueOf","cloneKeys","clone","proto","_constructor","isNaN"],"mappings":"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","file":"isopod.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"isopod\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"isopod\"] = factory();\n\telse\n\t\troot[\"isopod\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"isopod\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"isopod\"] = factory();\n\telse\n\t\troot[\"isopod\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar isopod = {\n\t  serialize: __webpack_require__(5),\n\t  deserialize: __webpack_require__(4)\n\t};\n\t\n\tmodule.exports = isopod;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar openClose = {\n\t  '(': ')',\n\t  '[': ']',\n\t  '{': '}',\n\t  '\"': '\"',\n\t  \"'\": \"'\",\n\t  '//': '\\n',\n\t  '/*': '*/'\n\t};\n\tfunction closeOf(prev, ch) {\n\t  return prev === '/' ? openClose[prev + ch] : openClose[ch];\n\t}\n\t\n\tfunction parsingContext(stack) {\n\t  var last = stack[stack.length - 1];\n\t  if (last === '\"' || last === \"'\") return 'String';else if (last === '*/' || last === '\\n') return 'Comment';else return 'Code';\n\t}\n\t\n\tfunction peach(str, iter) {\n\t  var stack = [];\n\t  function matchesLast(str) {\n\t    return str === stack[stack.length - 1];\n\t  }\n\t  var prev = void 0;\n\t  var _iteratorNormalCompletion = true;\n\t  var _didIteratorError = false;\n\t  var _iteratorError = undefined;\n\t\n\t  try {\n\t    for (var _iterator = str[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t      var ch = _step.value;\n\t\n\t      iter(ch, stack);\n\t      if (parsingContext(stack) === 'String') {\n\t        if (prev !== '\\\\' && matchesLast(ch)) stack.pop();\n\t      } else if (parsingContext(stack) === 'Comment') {\n\t        if (matchesLast(ch) || matchesLast(prev + ch)) stack.pop();\n\t      } else {\n\t        if (matchesLast(ch)) stack.pop();else {\n\t          var close = closeOf(prev, ch);\n\t          if (close) stack.push(close);\n\t        }\n\t      }\n\t      prev = ch;\n\t    }\n\t  } catch (err) {\n\t    _didIteratorError = true;\n\t    _iteratorError = err;\n\t  } finally {\n\t    try {\n\t      if (!_iteratorNormalCompletion && _iterator.return) {\n\t        _iterator.return();\n\t      }\n\t    } finally {\n\t      if (_didIteratorError) {\n\t        throw _iteratorError;\n\t      }\n\t    }\n\t  }\n\t}\n\t\n\tfunction parseParamStr(str) {\n\t  var params = [];\n\t  var curParam = '';\n\t  peach(str, function (ch, stack) {\n\t    if (parsingContext(stack) === 'Code' && ch === ',') {\n\t      params.push(curParam);\n\t      curParam = '';\n\t    } else {\n\t      curParam += ch;\n\t    }\n\t  });\n\t  if (curParam) params.push(curParam);\n\t  return params;\n\t}\n\t\n\tfunction parseArrow(source) {\n\t  var left = '',\n\t      right = '',\n\t      hitArrow = false;\n\t  var prev = void 0;\n\t  peach(source, function (ch, stack) {\n\t    if (hitArrow) right += ch;else if (stack.length === 0 && prev + ch === '=>') {\n\t      left = left.slice(0, -1);\n\t      hitArrow = true;\n\t    } else left += ch;\n\t    prev = ch;\n\t  });\n\t  left = left.trim();\n\t  var paramStr = left.startsWith('(') ? left.slice(1, -1) : left;\n\t  right = right.trim();\n\t  var body = right.startsWith('{') ? right.slice(1, -1) : 'return ' + right + ';';\n\t  return {\n\t    name: '',\n\t    params: parseParamStr(paramStr),\n\t    body: body,\n\t    kind: 'ArrowFunction'\n\t  };\n\t}\n\t\n\tfunction parseNormal(source) {\n\t  source = source.slice(8).trimLeft(); // drop 'function' part\n\t  var name = '',\n\t      paramStr = '',\n\t      bodyStr = '',\n\t      kind = 'StandardFunction';\n\t  if (source.startsWith('*')) {\n\t    kind = 'GeneratorFunction';\n\t    source = source.slice(1);\n\t  }\n\t  while (source[0] !== '(') {\n\t    name += source[0];\n\t    source = source.slice(1);\n\t  }\n\t  peach(source, function (ch, stack) {\n\t    if (stack[0] === ')') paramStr += ch;else if (stack[0] === '}') bodyStr += ch;\n\t  });\n\t  return {\n\t    name: name.trim(),\n\t    params: parseParamStr(paramStr.slice(0, -1)),\n\t    body: bodyStr.slice(0, -1),\n\t    kind: kind\n\t  };\n\t}\n\t\n\tfunction farse(fn) {\n\t  var source = Function.prototype.toString.call(fn);\n\t  return source.startsWith('function') ? parseNormal(source) : parseArrow(source);\n\t}\n\t\n\tfarse.inverse = __webpack_require__(3);\n\t\n\tmodule.exports = farse;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\t\n\tfunction each(obj, fn) {\n\t  Object.keys(obj).forEach(function (k) {\n\t    fn(k, obj[k]);\n\t  });\n\t};\n\t\n\tfunction flags(r) {\n\t  if (r.flags) return r.flags;\n\t  return (r.ignoreCase ? 'i' : '') + (r.multiline ? 'm' : '') + (r.global ? 'g' : '') + (r.sticky ? 'y' : '');\n\t};\n\t\n\tvar typedArrayConstructors = new Set([Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array]);\n\t\n\tvar typedArrayTypes = new Set();\n\ttypedArrayConstructors.forEach(function (constructor) {\n\t  typedArrayTypes.add(constructor.name);\n\t});\n\t\n\tvar bufferableConstructors = new Set([DataView]);\n\ttypedArrayConstructors.forEach(function (constructor) {\n\t  bufferableConstructors.add(constructor);\n\t});\n\t\n\tvar bufferableTypes = new Map();\n\tbufferableConstructors.forEach(function (constructor) {\n\t  bufferableTypes.set(constructor.name, constructor);\n\t});\n\t\n\tvar specialTypes = new Set([undefined, null, NaN, Infinity, -Infinity]);\n\t\n\tvar nativeConstructors = new Set([Boolean, Number, Object, Function, Set, Symbol, Array, Map, RegExp, Error, ArrayBuffer, Date]);\n\tbufferableConstructors.forEach(function (constructor) {\n\t  nativeConstructors.add(constructor);\n\t});\n\t\n\tvar nativePrototypes = new Set();\n\tnativeConstructors.forEach(function (constructor) {\n\t  nativePrototypes.add(constructor.prototype);\n\t});\n\t\n\tvar allowedTypes = new Set();\n\tnativeConstructors.forEach(function (constructor) {\n\t  allowedTypes.add(constructor.name);\n\t});\n\tspecialTypes.forEach(function (specialType) {\n\t  allowedTypes.add('' + specialType);\n\t});\n\tallowedTypes.add('HostGlobal');\n\t\n\tfunction baseTypeOf(thing) {\n\t  return Object.prototype.toString.call(thing).slice(8, -1);\n\t}\n\t\n\tfunction isopodTypeOf(thing) {\n\t  var type = specialTypes.has(thing) ? '' + thing : hostGlobals.has(thing) ? 'HostGlobal' : baseTypeOf(thing);\n\t  return allowedTypes.has(type) ? type : 'Unsupported:' + type; // TODO: consider throwing error for unsupported types\n\t}\n\t\n\tvar parensPattern = /\\(.+\\)/;\n\tfunction getSymbolString(sym) {\n\t  return sym.toString().match(parensPattern)[0].slice(1, -1);\n\t}\n\t\n\tfunction hasNonNativeConstructor(obj) {\n\t  return Object.prototype.hasOwnProperty.call(obj, 'constructor') && !nativeConstructors.has(obj.constructor);\n\t}\n\t\n\tfunction isSimple(thing) {\n\t  return !specialTypes.has(thing) && !isRef(thing);\n\t}\n\t\n\tfunction isRef(thing) {\n\t  return (typeof thing === 'undefined' ? 'undefined' : _typeof(thing)) === 'symbol' || typeof thing === 'function' || (typeof thing === 'undefined' ? 'undefined' : _typeof(thing)) === 'object' && thing !== null;\n\t}\n\t\n\tfunction isPlainOrTypedArray(thing) {\n\t  var type = baseTypeOf(thing);\n\t  return type === 'Array' || typedArrayTypes.has(type);\n\t}\n\t\n\tvar hostGlobals = function () {\n\t  var globallyAccessible = new Map();\n\t  var queue = [{\n\t    value: global,\n\t    path: []\n\t  }];\n\t  while (queue.length) {\n\t    var item = queue.shift();\n\t    var obj = item.value;\n\t    var path = item.path;\n\t    if (globallyAccessible.has(obj)) continue;\n\t    globallyAccessible.set(obj, path);\n\t    var _iteratorNormalCompletion = true;\n\t    var _didIteratorError = false;\n\t    var _iteratorError = undefined;\n\t\n\t    try {\n\t      for (var _iterator = Object.getOwnPropertyNames(obj).concat(['__proto__'])[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t        var propertyName = _step.value;\n\t\n\t        var child = void 0;\n\t        try {\n\t          child = obj[propertyName];\n\t        } catch (e) {\n\t          continue;\n\t        }\n\t        if (!isRef(child)) continue;\n\t        queue.push({\n\t          value: child,\n\t          path: path.concat([propertyName])\n\t        });\n\t      }\n\t    } catch (err) {\n\t      _didIteratorError = true;\n\t      _iteratorError = err;\n\t    } finally {\n\t      try {\n\t        if (!_iteratorNormalCompletion && _iterator.return) {\n\t          _iterator.return();\n\t        }\n\t      } finally {\n\t        if (_didIteratorError) {\n\t          throw _iteratorError;\n\t        }\n\t      }\n\t    }\n\t  }\n\t  return globallyAccessible;\n\t}();\n\t\n\tfunction hostObjFromPath(path) {\n\t  try {\n\t    return path.reduce(function (obj, key) {\n\t      return obj[key];\n\t    }, global);\n\t  } catch (e) {}\n\t}\n\t\n\tmodule.exports = {\n\t  each: each,\n\t  flags: flags,\n\t  bufferableTypes: bufferableTypes,\n\t  specialTypes: specialTypes,\n\t  nativePrototypes: nativePrototypes,\n\t  isopodTypeOf: isopodTypeOf,\n\t  getSymbolString: getSymbolString,\n\t  hasNonNativeConstructor: hasNonNativeConstructor,\n\t  isSimple: isSimple,\n\t  isPlainOrTypedArray: isPlainOrTypedArray,\n\t  hostGlobals: hostGlobals,\n\t  hostObjFromPath: hostObjFromPath\n\t};\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction isArrow(parsed) {\n\t  return parsed.kind === 'ArrowFunction';\n\t}\n\t\n\tfunction isGenerator(parsed) {\n\t  return parsed.kind === 'GeneratorFunction';\n\t}\n\t\n\tvar GeneratorFunction = /* istanbul ignore next */regeneratorRuntime.mark(function _callee() {\n\t  return regeneratorRuntime.wrap(function _callee$(_context) {\n\t    while (1) {\n\t      switch (_context.prev = _context.next) {\n\t        case 0:\n\t        case 'end':\n\t          return _context.stop();\n\t      }\n\t    }\n\t  }, _callee, this);\n\t}).constructor;\n\t\n\tfunction inexactUnfarse(parsed) {\n\t  var constructor = isGenerator(parsed) ? GeneratorFunction : Function;\n\t  return new (Function.prototype.bind.apply(constructor, [null].concat(_toConsumableArray(parsed.params), [parsed.body])))();\n\t}\n\t\n\tfunction exactUnfarse(parsed) {\n\t  // beware: uses `eval`\n\t  var gap = isArrow(parsed) ? '=>' : ' ';\n\t  var label = isArrow(parsed) ? '' : 'function' + (isGenerator(parsed) ? '*' : '') + ' ' + parsed.name;\n\t  return eval('(' + label + '(' + parsed.params.join(',') + ')' + gap + '{' + parsed.body + '})');\n\t};\n\t\n\tmodule.exports = {\n\t  inexact: inexactUnfarse,\n\t  exact: exactUnfarse\n\t};\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar farse = __webpack_require__(1);\n\t\n\tvar utils = __webpack_require__(2);\n\t\n\t// convert a dehydrated object back into something of the correct type\n\tfunction typedFromDehydrated(dehydrated) {\n\t  switch (dehydrated.type) {\n\t    case 'Symbol':\n\t      return Symbol(dehydrated.source);\n\t    case 'Function':\n\t      return farse.inverse.inexact(dehydrated.source);\n\t    case 'Set':\n\t      return new Set();\n\t    case 'Map':\n\t      return new Map();\n\t    case 'Array':\n\t      return [];\n\t    case 'RegExp':\n\t      return new RegExp(dehydrated.source[0], dehydrated.source[1]);\n\t    case 'Error':\n\t      {\n\t        var err = Error(dehydrated.source.message);\n\t        if (dehydrated.source.stack) {\n\t          Object.defineProperty(err, 'stack', {\n\t            value: dehydrated.source.stack,\n\t            enumerable: false\n\t          });\n\t        }\n\t        return err;\n\t      }\n\t    case 'Object':\n\t      return {};\n\t    case 'null':\n\t      return null;\n\t    case 'undefined':\n\t      return undefined;\n\t    case 'NaN':\n\t      return NaN;\n\t    case 'Infinity':\n\t      return Infinity;\n\t    case '-Infinity':\n\t      return -Infinity;\n\t    case 'ArrayBuffer':\n\t      return new Uint8Array(dehydrated.source).buffer;\n\t    case 'Date':\n\t      return new Date(dehydrated.source);\n\t    case 'HostGlobal':\n\t      return utils.hostObjFromPath(dehydrated.source);\n\t  }\n\t}\n\t\n\t// use the dehydrated format to populate an empty object of the correct type\n\tfunction hydrateOne(hydrated, dehydrated, refs) {\n\t  // special values and host globals need no further hydration\n\t  if (utils.specialTypes.has(hydrated) || utils.hostGlobals.has(hydrated)) return;\n\t  // account for any objects that are duplicate references\n\t  function possibleRef(v) {\n\t    return Array.isArray(v) ? refs[v[0]] : v;\n\t  }\n\t  switch (dehydrated.type) {\n\t    case 'Set':\n\t      {\n\t        // a set incorporates its source array as elements\n\t        dehydrated.source.forEach(function (elem) {\n\t          hydrated.add(possibleRef(elem));\n\t        });\n\t        break;\n\t      }\n\t    case 'Map':\n\t      {\n\t        // a map incorporates its source array as key-value entries\n\t        dehydrated.source.forEach(function (mapEntry) {\n\t          var k = mapEntry[0]; // TODO: could replace with destructuring\n\t          var v = mapEntry[1]; // TODO: could replace with destructuring\n\t          hydrated.set(possibleRef(k), possibleRef(v));\n\t        });\n\t        break;\n\t      }\n\t    case 'Array':\n\t      {\n\t        // an array incorporates its source array as elements\n\t        dehydrated.source.forEach(function (elem) {\n\t          hydrated.push(possibleRef(elem));\n\t        });\n\t        break;\n\t      }\n\t  }\n\t  // incorporate any additional keys from the dehydrated object\n\t  utils.each(dehydrated.keys, function (k, v) {\n\t    if (k === 'constructor') {\n\t      Object.defineProperty(hydrated, 'constructor', {\n\t        value: possibleRef(v),\n\t        enumerable: false\n\t      });\n\t    } else {\n\t      hydrated[k] = possibleRef(v);\n\t    }\n\t  });\n\t}\n\t\n\t// convert a serialized thing into a fully imbued clone of the original, i.e. the one that got serialized in the first place\n\tfunction deserialize(serialized) {\n\t  // if the base serialized root is not an array it is simply a primitive value\n\t  if (!Array.isArray(serialized)) return serialized;\n\t  // the mapping corresponds the being-hydrated and dehydrated versions of the data\n\t  var mapping = new Map();\n\t  // stores bufferables to get to after the first pass\n\t  var todoBufferables = new Map();\n\t  // hold references to the being-hydrated objects\n\t  var refs = serialized.map(function (dehydrated, index) {\n\t    if (utils.bufferableTypes.has(dehydrated.type)) {\n\t      // will need the dehydrated version and index in refs array for later use\n\t      todoBufferables.set(dehydrated, index);\n\t    } else {\n\t      var emptyHydrated = typedFromDehydrated(dehydrated);\n\t      mapping.set(dehydrated, emptyHydrated);\n\t      return emptyHydrated;\n\t    }\n\t  });\n\t  // bufferables cannot be constructed as empty and filled in later, they need their underlying buffer at construction time, which we only have access to after the first pass\n\t  todoBufferables.forEach(function (index, dehydrated) {\n\t    var constructor = utils.bufferableTypes.get(dehydrated.type);\n\t    var buffer = refs[dehydrated.source.buffer[0]];\n\t    var byteOffset = dehydrated.source.byteOffset;\n\t    var length = dehydrated.source.length;\n\t    var bufferable = new constructor(buffer, byteOffset, length);\n\t    // attach properly typed reference at that index\n\t    refs[index] = bufferable;\n\t    // include properly typed reference to be further enriched in the final hydration step\n\t    mapping.set(dehydrated, bufferable);\n\t  });\n\t  // final pass, imbue each empty (but properly typed) object with all its glorious details\n\t  mapping.forEach(function (emptyHydrated, dehydrated) {\n\t    hydrateOne(emptyHydrated, dehydrated, refs);\n\t  });\n\t  // the first ref is now a clone of the base object that was originally serialized\n\t  return refs[0];\n\t};\n\t\n\tmodule.exports = deserialize;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\t\n\tvar farse = __webpack_require__(1);\n\t\n\tvar utils = __webpack_require__(2);\n\t\n\tfunction bufferableSource(bufferable) {\n\t  // in case a bufferable has a non-standard prototype\n\t  var currentProto = Object.getPrototypeOf(bufferable);\n\t  var originalProto = utils.bufferableTypes.get(utils.isopodTypeOf(bufferable)).prototype;\n\t  // temporarily change prototype back to original\n\t  Object.setPrototypeOf(bufferable, originalProto);\n\t  // a bufferable's source contains its buffer, the byteOffset, and the length\n\t  var source = {\n\t    buffer: bufferable.buffer,\n\t    byteOffset: bufferable.byteOffset,\n\t    length: bufferable.length\n\t  };\n\t  // change back to assigned prototype\n\t  Object.setPrototypeOf(bufferable, currentProto);\n\t  return source;\n\t}\n\t\n\t// given some object or primitive, convert it into a format that will retain all its details when stringified\n\tfunction serialize(root) {\n\t\n\t  // deal with trivial case\n\t  if (utils.isSimple(root)) return root;\n\t\n\t  // the serialized result will be an array of \"dehydrated\" objects\n\t  var serialized = [];\n\t  // the idCache keeps track of any objects (or symbols) that have been seen already\n\t  var idCache = new Map();\n\t\n\t  // incorporate an object (or symbol) into the cache and return the seed of a dehydrated stand-in\n\t  function assoc(original) {\n\t    var dehydrated = {};\n\t    // the id represents the location of the dehydrated object in the root serialized array\n\t    var id = serialized.push(dehydrated) - 1;\n\t    idCache.set(original, id);\n\t    return dehydrated;\n\t  }\n\t\n\t  // catch-all to obtain various meaningful \"source\" values from native Object types\n\t  function sourceValueFrom(original, type) {\n\t    // objects and special values don't have a \"source\"\n\t    if (type === 'Object' || utils.specialTypes.has(original)) return;\n\t    if (utils.bufferableTypes.has(type)) {\n\t      // make sure to attach the buffer by reference\n\t      var source = bufferableSource(original);\n\t      source.buffer = dehydrate(source.buffer);\n\t      return source;\n\t    }\n\t    switch (type) {\n\t      // a symbol's source is the string used to construct it\n\t      case 'Symbol':\n\t        return utils.getSymbolString(original);\n\t      // a function's source is its `farse`d result\n\t      case 'Function':\n\t        return farse(original);\n\t      case 'RegExp':\n\t        return [original.source, utils.flags(original)];\n\t      case 'Error':\n\t        {\n\t          return {\n\t            message: Object.prototype.hasOwnProperty.call(original, 'message') ? original.message : undefined,\n\t            stack: original.stack\n\t          };\n\t        }\n\t      // an array's source is an array copy of its elements\n\t      case 'Array':\n\t        return Array.prototype.map.call(original, dehydrate);\n\t      case 'Set':\n\t        {\n\t          var _ret = function () {\n\t            // a set's source is an array of the set elements\n\t            var source = [];\n\t            Set.prototype.forEach.call(original, function (elem) {\n\t              source.push(dehydrate(elem));\n\t            });\n\t            return {\n\t              v: source\n\t            };\n\t          }();\n\t\n\t          if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n\t        }\n\t      case 'Map':\n\t        {\n\t          var _ret2 = function () {\n\t            // a map's source is an array of key-value pair arrays\n\t            var source = [];\n\t            Map.prototype.forEach.call(original, function (v, k) {\n\t              source.push([k, v].map(dehydrate));\n\t            });\n\t            return {\n\t              v: source\n\t            };\n\t          }();\n\t\n\t          if ((typeof _ret2 === 'undefined' ? 'undefined' : _typeof(_ret2)) === \"object\") return _ret2.v;\n\t        }\n\t      // an array buffer's source is its Uint8Array representation\n\t      case 'ArrayBuffer':\n\t        return Array.prototype.slice.call(new Uint8Array(original));\n\t      case 'Date':\n\t        return Date.prototype.valueOf.call(original);\n\t      case 'HostGlobal':\n\t        return utils.hostGlobals.get(original);\n\t    }\n\t  }\n\t\n\t  // return any keys in the original not accounted for in the source\n\t  function cloneKeys(original, source) {\n\t    // special values do not have keys, host globals don't need 'em\n\t    if (utils.specialTypes.has(original) || utils.hostGlobals.has(original)) return;\n\t    var clone = {};\n\t    var proto = Object.getPrototypeOf(original);\n\t    // include original's __proto__ when cloning it, if it's non-native\n\t    if (!utils.nativePrototypes.has(proto)) {\n\t      Object.defineProperty(clone, '__proto__', {\n\t        value: dehydrate(proto),\n\t        enumerable: true // ensure that it will show up as a result of stringification\n\t      });\n\t    }\n\t    // include the original's constructor if it has one\n\t    if (utils.hasNonNativeConstructor(original)) {\n\t      var _constructor = original.constructor;\n\t      if (_constructor instanceof Object && _constructor.prototype === original) {\n\t        clone.constructor = dehydrate(_constructor);\n\t      }\n\t    }\n\t    // include all keys in original not yet accounted for by the source\n\t    utils.each(original, function (k, v) {\n\t      // make sure not to double include numerical array keys already in the source\n\t      if (source && utils.isPlainOrTypedArray(original) && !Number.isNaN(Number(k))) return;\n\t      clone[k] = dehydrate(v);\n\t    });\n\t    return clone;\n\t  }\n\t\n\t  // convert something into a rehydratable format\n\t  function dehydrate(thing) {\n\t    // simple values (non-special booleans, numbers, and strings) remain themselves\n\t    if (utils.isSimple(thing)) return thing;\n\t    if (!idCache.has(thing)) {\n\t      // incorporate the object into the cache\n\t      var dehydrated = assoc(thing);\n\t      // set its type (helps streamline deserialization)\n\t      dehydrated.type = utils.isopodTypeOf(thing);\n\t      // set its \"source\" value (helps streamline deserialization)\n\t      dehydrated.source = sourceValueFrom(thing, dehydrated.type);\n\t      // set any additional keys not included in the source\n\t      dehydrated.keys = cloneKeys(thing, dehydrated.source);\n\t    }\n\t    // objects are replaced with the id representing their location in the root serialized array (helps streamline deserialization)\n\t    return [idCache.get(thing)];\n\t  }\n\t\n\t  // kick off the recursive process of dehydrating everything in the original\n\t  dehydrate(root);\n\t\n\t  return serialized;\n\t};\n\t\n\tmodule.exports = serialize;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** isopod.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 59290157ec05a0ae9d34\n **/","'use strict';\n\nconst isopod = {\n  serialize: require('./serialize'),\n  deserialize: require('./deserialize')\n};\n\nmodule.exports = isopod;\n\n\n/** WEBPACK FOOTER **\n ** ./src/isopod.js\n **/","'use strict';\n\nconst openClose = {\n  '(': ')',\n  '[': ']',\n  '{': '}',\n  '\"': '\"',\n  \"'\": \"'\",\n  '//': '\\n',\n  '/*': '*/'\n};\nfunction closeOf (prev, ch) {\n  return prev === '/' ? openClose[prev+ch] : openClose[ch];\n}\n\nfunction parsingContext (stack) {\n  const last = stack[stack.length-1];\n  if (last === '\"' || last === \"'\") return 'String';\n  else if (last === '*/' || last === '\\n') return 'Comment';\n  else return 'Code';\n}\n\nfunction peach (str, iter) {\n  const stack = [];\n  function matchesLast (str) {\n    return str === stack[stack.length-1];\n  }\n  let prev;\n  for (let ch of str) {\n    iter(ch, stack);\n    if (parsingContext(stack) === 'String') {\n      if (prev !== '\\\\' && matchesLast(ch)) stack.pop();\n    } else if (parsingContext(stack) === 'Comment') {\n      if (matchesLast(ch) || matchesLast(prev+ch)) stack.pop();\n    } else {\n      if (matchesLast(ch)) stack.pop();\n      else {\n        let close = closeOf(prev, ch);\n        if (close) stack.push(close);\n      }\n    }\n    prev = ch;\n  }\n}\n\nfunction parseParamStr (str) {\n  const params = [];\n  let curParam = '';\n  peach(str, function (ch, stack) {\n    if (parsingContext(stack) === 'Code' && ch === ',') {\n      params.push(curParam);\n      curParam = '';\n    } else {\n      curParam += ch;\n    }\n  });\n  if (curParam) params.push(curParam);\n  return params;\n}\n\nfunction parseArrow (source) {\n  let left = '', right = '', hitArrow = false;\n  let prev;\n  peach(source, function (ch, stack) {\n    if (hitArrow) right += ch;\n    else if (stack.length === 0 && prev + ch === '=>') {\n      left = left.slice(0,-1);\n      hitArrow = true;\n    } else left += ch;\n    prev = ch;\n  });\n  left = left.trim();\n  const paramStr = left.startsWith('(') ? left.slice(1,-1) : left;\n  right = right.trim();\n  const body = right.startsWith('{') ? right.slice(1,-1) : `return ${right};`;\n  return {\n    name: '',\n    params: parseParamStr(paramStr),\n    body: body,\n    kind: 'ArrowFunction'\n  };\n}\n\nfunction parseNormal (source) {\n  source = source.slice(8).trimLeft(); // drop 'function' part\n  let name = '', paramStr = '', bodyStr = '', kind = 'StandardFunction';\n  if (source.startsWith('*')) {\n    kind = 'GeneratorFunction';\n    source = source.slice(1);\n  }\n  while (source[0] !== '(') {\n    name += source[0];\n    source = source.slice(1);\n  }\n  peach(source, function (ch, stack) {\n    if (stack[0] === ')') paramStr += ch;\n    else if (stack[0] === '}') bodyStr += ch;\n  });\n  return {\n    name: name.trim(),\n    params: parseParamStr(paramStr.slice(0,-1)),\n    body: bodyStr.slice(0,-1),\n    kind\n  };\n}\n\nfunction farse (fn) {\n  const source = Function.prototype.toString.call(fn);\n  return source.startsWith('function') ? parseNormal(source) : parseArrow(source);\n}\n\nfarse.inverse = require('./unfarse');\n\nmodule.exports = farse;\n\n\n/** WEBPACK FOOTER **\n ** ./~/farse/src/farse.js\n **/","'use strict';\n\nfunction each (obj, fn) {\n  Object.keys(obj).forEach(function (k) {\n    fn(k, obj[k]);\n  });\n};\n\nfunction flags (r) {\n  if (r.flags) return r.flags;\n  return (r.ignoreCase ? 'i' : '') + (r.multiline ? 'm' : '') + (r.global ? 'g' : '') + (r.sticky ? 'y' : '');\n};\n\nconst typedArrayConstructors = new Set([\n  Int8Array,\n  Uint8Array,\n  Uint8ClampedArray,\n  Int16Array,\n  Uint16Array,\n  Int32Array,\n  Uint32Array,\n  Float32Array,\n  Float64Array\n]);\n\nconst typedArrayTypes = new Set();\ntypedArrayConstructors.forEach(function (constructor) {\n  typedArrayTypes.add(constructor.name);\n});\n\nconst bufferableConstructors = new Set([\n  DataView\n]);\ntypedArrayConstructors.forEach(function (constructor) {\n  bufferableConstructors.add(constructor);\n});\n\nconst bufferableTypes = new Map();\nbufferableConstructors.forEach(function (constructor) {\n  bufferableTypes.set(constructor.name, constructor);\n});\n\nconst specialTypes = new Set([\n  undefined,\n  null,\n  NaN,\n  Infinity,\n  -Infinity\n]);\n\nconst nativeConstructors = new Set([\n  Boolean,\n  Number,\n  Object,\n  Function,\n  Set,\n  Symbol,\n  Array,\n  Map,\n  RegExp,\n  Error,\n  ArrayBuffer,\n  Date\n]);\nbufferableConstructors.forEach(function (constructor) {\n  nativeConstructors.add(constructor);\n});\n\nconst nativePrototypes = new Set();\nnativeConstructors.forEach(function (constructor) {\n  nativePrototypes.add(constructor.prototype);\n});\n\nconst allowedTypes = new Set();\nnativeConstructors.forEach(function (constructor) {\n  allowedTypes.add(constructor.name);\n});\nspecialTypes.forEach(function (specialType) {\n  allowedTypes.add(`${specialType}`);\n});\nallowedTypes.add('HostGlobal');\n\nfunction baseTypeOf (thing) {\n  return Object.prototype.toString.call(thing).slice(8,-1);\n}\n\nfunction isopodTypeOf (thing) {\n  const type = specialTypes.has(thing) ? `${thing}` : hostGlobals.has(thing) ? 'HostGlobal' : baseTypeOf(thing);\n  return allowedTypes.has(type) ? type : `Unsupported:${type}`; // TODO: consider throwing error for unsupported types\n}\n\nconst parensPattern = /\\(.+\\)/;\nfunction getSymbolString (sym) {\n  return sym.toString().match(parensPattern)[0].slice(1,-1);\n}\n\nfunction hasNonNativeConstructor (obj) {\n  return Object.prototype.hasOwnProperty.call(obj, 'constructor') && !nativeConstructors.has(obj.constructor);\n}\n\nfunction isSimple (thing) {\n  return !specialTypes.has(thing) && !isRef(thing); \n}\n\nfunction isRef (thing) {\n  return typeof thing === 'symbol' || typeof thing === 'function' || typeof thing === 'object' && thing !== null;\n}\n\nfunction isPlainOrTypedArray (thing) {\n  const type = baseTypeOf(thing);\n  return type === 'Array' || typedArrayTypes.has(type);\n}\n\nconst hostGlobals = (function () {\n  const globallyAccessible = new Map();\n  const queue = [{\n    value: global,\n    path: []\n  }];\n  while (queue.length) {\n    const item = queue.shift();\n    const obj = item.value;\n    const path = item.path;\n    if (globallyAccessible.has(obj)) continue;\n    globallyAccessible.set(obj, path);\n    for (let propertyName of Object.getOwnPropertyNames(obj).concat(['__proto__'])) {\n      let child;\n      try {child = obj[propertyName];}\n      catch (e) {continue;}\n      if (!isRef(child)) continue;\n      queue.push({\n        value: child,\n        path: path.concat([propertyName])\n      });\n    }\n  }\n  return globallyAccessible;\n})();\n\nfunction hostObjFromPath (path) {\n  try {\n    return path.reduce(function (obj, key) {\n      return obj[key];\n    }, global);\n  } catch (e) {}\n}\n\nmodule.exports = {\n  each,\n  flags,\n  bufferableTypes,\n  specialTypes,\n  nativePrototypes,\n  isopodTypeOf,\n  getSymbolString,\n  hasNonNativeConstructor,\n  isSimple,\n  isPlainOrTypedArray,\n  hostGlobals,\n  hostObjFromPath\n};\n\n\n/** WEBPACK FOOTER **\n ** ./src/utils.js\n **/","'use strict';\n\nfunction isArrow (parsed) {\n  return parsed.kind === 'ArrowFunction';\n}\n\nfunction isGenerator (parsed) {\n  return parsed.kind === 'GeneratorFunction';\n}\n\nconst GeneratorFunction = (/* istanbul ignore next */ function*(){}).constructor;\n\nfunction inexactUnfarse (parsed) {\n  const constructor = isGenerator(parsed) ? GeneratorFunction : Function;\n  return new constructor(...parsed.params, parsed.body);\n}\n\nfunction exactUnfarse (parsed) {\n  // beware: uses `eval`\n  const gap = isArrow(parsed) ? '=>' : ' ';\n  const label = isArrow(parsed) ? '' : `function${isGenerator(parsed)?'*':''} ${parsed.name}`;\n  return eval(`(${label}(${parsed.params.join(',')})${gap}{${parsed.body}})`);\n};\n\nmodule.exports = {\n  inexact: inexactUnfarse,\n  exact: exactUnfarse\n};\n\n\n/** WEBPACK FOOTER **\n ** ./~/farse/src/unfarse.js\n **/","'use strict';\n\nconst farse = require('farse');\n\nconst utils = require('./utils');\n\n// convert a dehydrated object back into something of the correct type\nfunction typedFromDehydrated (dehydrated) {\n  switch (dehydrated.type) {\n    case 'Symbol': return Symbol(dehydrated.source);\n    case 'Function': return farse.inverse.inexact(dehydrated.source);\n    case 'Set': return new Set();\n    case 'Map': return new Map();\n    case 'Array': return [];\n    case 'RegExp': return new RegExp(dehydrated.source[0], dehydrated.source[1]);\n    case 'Error': {\n      const err = Error(dehydrated.source.message);\n      if (dehydrated.source.stack) {\n        Object.defineProperty(err, 'stack', {\n          value: dehydrated.source.stack,\n          enumerable: false\n        });\n      }\n      return err;\n    }\n    case 'Object': return {};\n    case 'null': return null;\n    case 'undefined': return undefined;\n    case 'NaN': return NaN;\n    case 'Infinity': return Infinity;\n    case '-Infinity': return -Infinity;\n    case 'ArrayBuffer': return new Uint8Array(dehydrated.source).buffer;\n    case 'Date': return new Date(dehydrated.source);\n    case 'HostGlobal': return utils.hostObjFromPath(dehydrated.source);\n  }\n}\n\n// use the dehydrated format to populate an empty object of the correct type\nfunction hydrateOne (hydrated, dehydrated, refs) {\n  // special values and host globals need no further hydration\n  if (utils.specialTypes.has(hydrated) || utils.hostGlobals.has(hydrated)) return;\n  // account for any objects that are duplicate references\n  function possibleRef (v) {\n    return Array.isArray(v) ? refs[v[0]] : v;\n  }\n  switch (dehydrated.type) {\n    case 'Set': {\n      // a set incorporates its source array as elements\n      dehydrated.source.forEach(function (elem) {\n        hydrated.add(possibleRef(elem));\n      });\n      break;\n    }\n    case 'Map': {\n      // a map incorporates its source array as key-value entries\n      dehydrated.source.forEach(function (mapEntry) {\n        const k = mapEntry[0]; // TODO: could replace with destructuring\n        const v = mapEntry[1]; // TODO: could replace with destructuring\n        hydrated.set(possibleRef(k), possibleRef(v));\n      });\n      break;\n    }\n    case 'Array': {\n      // an array incorporates its source array as elements\n      dehydrated.source.forEach(function (elem) {\n        hydrated.push(possibleRef(elem));\n      });\n      break;\n    }\n  }\n  // incorporate any additional keys from the dehydrated object\n  utils.each(dehydrated.keys, function (k, v) {\n    if (k === 'constructor') {\n      Object.defineProperty(hydrated, 'constructor', {\n        value: possibleRef(v),\n        enumerable: false\n      });\n    } else {\n      hydrated[k] = possibleRef(v);\n    }\n  });\n}\n\n// convert a serialized thing into a fully imbued clone of the original, i.e. the one that got serialized in the first place\nfunction deserialize (serialized) {\n  // if the base serialized root is not an array it is simply a primitive value\n  if (!Array.isArray(serialized)) return serialized;\n  // the mapping corresponds the being-hydrated and dehydrated versions of the data\n  const mapping = new Map();\n  // stores bufferables to get to after the first pass\n  const todoBufferables = new Map();\n  // hold references to the being-hydrated objects\n  const refs = serialized.map(function (dehydrated, index) {\n    if (utils.bufferableTypes.has(dehydrated.type)) {\n      // will need the dehydrated version and index in refs array for later use\n      todoBufferables.set(dehydrated, index);\n    } else {\n      const emptyHydrated = typedFromDehydrated(dehydrated);\n      mapping.set(dehydrated, emptyHydrated);\n      return emptyHydrated;\n    }\n  });\n  // bufferables cannot be constructed as empty and filled in later, they need their underlying buffer at construction time, which we only have access to after the first pass\n  todoBufferables.forEach(function (index, dehydrated) {\n    const constructor = utils.bufferableTypes.get(dehydrated.type);\n    const buffer = refs[dehydrated.source.buffer[0]];\n    const byteOffset = dehydrated.source.byteOffset;\n    const length = dehydrated.source.length;\n    const bufferable = new constructor(buffer, byteOffset, length);\n    // attach properly typed reference at that index\n    refs[index] = bufferable;\n    // include properly typed reference to be further enriched in the final hydration step\n    mapping.set(dehydrated, bufferable);\n  });\n  // final pass, imbue each empty (but properly typed) object with all its glorious details\n  mapping.forEach(function (emptyHydrated, dehydrated) {\n    hydrateOne(emptyHydrated, dehydrated, refs);\n  });\n  // the first ref is now a clone of the base object that was originally serialized\n  return refs[0];\n};\n\nmodule.exports = deserialize;\n\n\n/** WEBPACK FOOTER **\n ** ./src/deserialize.js\n **/","'use strict';\n\nconst farse = require('farse');\n\nconst utils = require('./utils');\n\nfunction bufferableSource (bufferable) {\n  // in case a bufferable has a non-standard prototype\n  const currentProto = Object.getPrototypeOf(bufferable);\n  const originalProto = utils.bufferableTypes.get(utils.isopodTypeOf(bufferable)).prototype;\n  // temporarily change prototype back to original\n  Object.setPrototypeOf(bufferable, originalProto);\n  // a bufferable's source contains its buffer, the byteOffset, and the length\n  const source = {\n    buffer: bufferable.buffer,\n    byteOffset: bufferable.byteOffset,\n    length: bufferable.length\n  };\n  // change back to assigned prototype\n  Object.setPrototypeOf(bufferable, currentProto);\n  return source;\n}\n\n// given some object or primitive, convert it into a format that will retain all its details when stringified\nfunction serialize (root) {\n\n  // deal with trivial case\n  if (utils.isSimple(root)) return root;\n\n  // the serialized result will be an array of \"dehydrated\" objects\n  const serialized = [];\n  // the idCache keeps track of any objects (or symbols) that have been seen already\n  const idCache = new Map();\n\n  // incorporate an object (or symbol) into the cache and return the seed of a dehydrated stand-in\n  function assoc (original) {\n    const dehydrated = {};\n    // the id represents the location of the dehydrated object in the root serialized array\n    const id = serialized.push(dehydrated)-1;\n    idCache.set(original, id);\n    return dehydrated;\n  }\n\n  // catch-all to obtain various meaningful \"source\" values from native Object types\n  function sourceValueFrom (original, type) {\n    // objects and special values don't have a \"source\"\n    if (type === 'Object' || utils.specialTypes.has(original)) return;\n    if (utils.bufferableTypes.has(type)) {\n      // make sure to attach the buffer by reference\n      const source = bufferableSource(original);\n      source.buffer = dehydrate(source.buffer);\n      return source;\n    }\n    switch (type) {\n      // a symbol's source is the string used to construct it\n      case 'Symbol': return utils.getSymbolString(original);\n      // a function's source is its `farse`d result\n      case 'Function': return farse(original);\n      case 'RegExp': return [original.source, utils.flags(original)];\n      case 'Error': {\n        return {\n          message: Object.prototype.hasOwnProperty.call(original, 'message') ? original.message : undefined,\n          stack: original.stack\n        };\n      }\n      // an array's source is an array copy of its elements\n      case 'Array': return Array.prototype.map.call(original, dehydrate);\n      case 'Set': {\n        // a set's source is an array of the set elements\n        const source = [];\n        Set.prototype.forEach.call(original, function (elem) {\n          source.push(dehydrate(elem));\n        });\n        return source;\n      }\n      case 'Map': {\n        // a map's source is an array of key-value pair arrays\n        const source = [];\n        Map.prototype.forEach.call(original, function (v, k) {\n          source.push([k,v].map(dehydrate));\n        });\n        return source;\n      }\n      // an array buffer's source is its Uint8Array representation\n      case 'ArrayBuffer': return Array.prototype.slice.call(new Uint8Array(original));\n      case 'Date': return Date.prototype.valueOf.call(original);\n      case 'HostGlobal': return utils.hostGlobals.get(original);\n    }\n  }\n\n  // return any keys in the original not accounted for in the source\n  function cloneKeys (original, source) {\n    // special values do not have keys, host globals don't need 'em\n    if (utils.specialTypes.has(original) || utils.hostGlobals.has(original)) return;\n    const clone = {};\n    const proto = Object.getPrototypeOf(original);\n    // include original's __proto__ when cloning it, if it's non-native\n    if (!utils.nativePrototypes.has(proto)) {\n      Object.defineProperty(clone, '__proto__', {\n        value: dehydrate(proto),\n        enumerable: true // ensure that it will show up as a result of stringification\n      });\n    }\n    // include the original's constructor if it has one\n    if (utils.hasNonNativeConstructor(original)) {\n      const constructor = original.constructor;\n      if (constructor instanceof Object && constructor.prototype === original) {\n        clone.constructor = dehydrate(constructor);\n      }\n    }\n    // include all keys in original not yet accounted for by the source\n    utils.each(original, function (k, v) {\n      // make sure not to double include numerical array keys already in the source\n      if (source && utils.isPlainOrTypedArray(original) && !Number.isNaN(Number(k))) return;\n      clone[k] = dehydrate(v);\n    });\n    return clone;\n  }\n\n  // convert something into a rehydratable format\n  function dehydrate (thing) {\n    // simple values (non-special booleans, numbers, and strings) remain themselves\n    if (utils.isSimple(thing)) return thing;\n    if (!idCache.has(thing)) {\n      // incorporate the object into the cache\n      const dehydrated = assoc(thing);\n      // set its type (helps streamline deserialization)\n      dehydrated.type = utils.isopodTypeOf(thing);\n      // set its \"source\" value (helps streamline deserialization)\n      dehydrated.source = sourceValueFrom(thing, dehydrated.type);\n      // set any additional keys not included in the source\n      dehydrated.keys = cloneKeys(thing, dehydrated.source);\n    }\n    // objects are replaced with the id representing their location in the root serialized array (helps streamline deserialization)\n    return [idCache.get(thing)]\n  }\n\n  // kick off the recursive process of dehydrating everything in the original\n  dehydrate(root);\n  \n  return serialized;\n\n};\n\nmodule.exports = serialize;\n\n\n/** WEBPACK FOOTER **\n ** ./src/serialize.js\n **/"],"sourceRoot":""}